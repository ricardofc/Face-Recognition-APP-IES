# Credits:
## This file was generated by the Tkinter Designer by Parth Jadhav
## https://github.com/ParthJadhav/Tkinter-Designer

## Original python code (opencv) was generated by:
   ##https://www.facebook.com/harish.kumawat.9638
   ##https://github.com/harishkumawat2610/Final-automatics-attendance-system-with-opencv_html_webpage_and-python.git

## This file was modified by:
### Author: Ricardo Feijoo Costa 
### DATA:  2021-12-08_17:31:47
#### GUI was generated with: https://www.figma.com/
#### The process as this App was generated:
##### GUI Figma -> tkinter_designer -> coding ... -> code opencv

from pathlib import Path
from tkinter import *
from tkinter.font import Font
from PIL import ImageTk, Image
import cv2, os, pickle
import face_recognition as fr
from tkinter import simpledialog
from tkinter import messagebox
import datetime, face_recognition
from tkinter import filedialog
import time
import glob
from playsound import playsound
#from selenium import webdriver
##from webdriver_manager.chrome import ChromeDriverManager
import pymysql

mydb = pymysql.connect(
  host="localhost",
  user="root",
  password="",
  database="My_college"
)
mycourse = mydb.cursor()


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def time():
    currentDT = datetime.datetime.now()
    string = currentDT.strftime('%d/%m/%Y %H:%M:%S %p')
    lbl.config(text=string)
    lbl.after(1000, time)

def onEnterBt1(event):
    global button_image_1
    button_image_1 = PhotoImage(file=relative_to_assets("button_1_green.png"))
    button_1.config(image=button_image_1)

def onLeaveBt1(event):
    global button_image_1
    button_image_1 = PhotoImage(file=relative_to_assets("button_1.png"))
    button_1.config(image=button_image_1)

def onEnterBt2(event):
    global button_image_2
    button_image_2 = PhotoImage(file=relative_to_assets("button_2_green.png"))
    button_2.config(image=button_image_2)

def onLeaveBt2(event):
    global button_image_2
    button_image_2 = PhotoImage(file=relative_to_assets("button_2.png"))
    button_2.config(image=button_image_2)

def onEnterBt3(event):
    global button_image_3
    button_image_3 = PhotoImage(file=relative_to_assets("button_3_green.png"))
    button_3.config(image=button_image_3)

def onLeaveBt3(event):
    global button_image_3
    button_image_3 = PhotoImage(file=relative_to_assets("button_3.png"))
    button_3.config(image=button_image_3)

def onEnterBt4(event):
    global button_image_4
    button_image_4 = PhotoImage(file=relative_to_assets("button_4_green.png"))
    button_4.config(image=button_image_4)

def onLeaveBt4(event):
    global button_image_4
    button_image_4 = PhotoImage(file=relative_to_assets("button_4.png"))
    button_4.config(image=button_image_4)
    
def aboutof():
    messagebox.showinfo(message='IES ...', title="CrÃ©ditos")

def Open_new():
    # import dataset_creator
    # creating blank lists
    known_face_encodings_list = []
    known_names = []
    ids = []
    font = cv2.FONT_HERSHEY_SIMPLEX

    # creating image's directory
    try:
        cwd = os.getcwd()
        ##print(cwd)
        os.mkdir(cwd + "/dataset_images")
    except:
        print()

    def image_taker(dir_name, student_id):
        cam = cv2.VideoCapture(0)
        counter = 0
        flag = 0
        while cam.isOpened():
            frame = cam.read()[1]

            # converting BGR frame to RGB frame
            rgb_frame = frame[:, :, ::-1]

            # getting locations of faces present
            faces = fr.face_locations(rgb_frame)

            for (top, right, bottom, left) in faces:
                cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)
            cv2.putText(frame, "'C'->Capturar imaxe  'q'->Pechar", (0, 25), font, 0.6, (255, 255, 255), 0)
            cv2.imshow("live", frame)
            # handler
            if cv2.waitKey(100) & 0xFF == ord('q'):
                if flag == 0:
                    # remove if image is not created to avoid any issue
                    os.rmdir(dir_name)
                break
            if cv2.waitKey(100) & 0xFF == ord('c'):
                # saving images
                cv2.imwrite(dir_name + "/image," + str(student_id) + "," + str(counter) + ".jpg", frame)
                flag = 1
                print("captured")
                cv2.destroyAllWindows()
        cam.release()
        cv2.destroyAllWindows()

    # setting up student Id
    choice = 'yes'
    # getting last student id and creating next id
    try:
        with open("ids.txt", 'rb') as file_data:
            labels = pickle.load(file_data)
        student_id = max(labels) + 1
    except FileNotFoundError:
        student_id = 0
     
    cancelar = 0
    while (choice == 'yes'):

        ##print(student_id)

        student_name = simpledialog.askstring("name@edu.xunta.gal", "Nome: \t\t\t\t", initialvalue='name')
        if student_name is None or choice != 'yes':
            cancelar = 1
            break
        else:
            cancelar = 0

        # defining directory name where images will be stored
        cwd = os.getcwd() + "/dataset_images/"
        dir_name = cwd + student_name + "," + str(student_id)
        # using try to avoid error when directory is already present
        try:
            os.mkdir(dir_name)
            print(dir_name)
            image_taker(dir_name, student_id)
            print(student_id)
        except:
            messagebox.showerror("Erro", "O nome xa existe.")

        choice = messagebox.askquestion("Agregar", "Engadir outro:")
        if choice == 'yes':
            student_id = student_id + 1
        else:
            cancelar = 2
            break
    print(cancelar)
    if cancelar!=1:
        dataset_dir_name = os.getcwd() + "/dataset_images"
        folder_names = os.listdir(dataset_dir_name)
        for i in folder_names:
            dir_name = dataset_dir_name + "/" + i
            face_names = os.listdir(dir_name)
            for face_name in face_names:
                image_name = dir_name + "/" + face_name
                print(image_name)

                # loading images using face_recognition library
                known_face = fr.load_image_file(image_name)
                print(known_face)

                # getting encodings of faces
                known_face_encoding = fr.face_encodings(known_face)
                if len(known_face_encoding) > 0:
                    known_face_encoding = fr.face_encodings(known_face)[0]
                else:
                    print("fail")
                student_name = i.split(",")[0]
                student_id_in = int(i.split(",")[1])

                # appending encodings,ids, names into lists
                known_face_encodings_list.append(known_face_encoding)
                known_names.append(student_name)
                ids.append(student_id_in)

        print(known_names)
        print(ids)

        # storing data in files using pickle
        with open("encodings.txt", 'wb') as file_data:
            pickle.dump(known_face_encodings_list, file_data)

        with open("name.txt", 'wb') as file_data:
            pickle.dump(known_names, file_data)

        with open("ids.txt", 'wb') as file_data:
            pickle.dump(ids, file_data)

def marked(okko):
  global pop
  pop=Toplevel(window)
  pop.geometry('81x81+600+420')
  pop.overrideredirect(1)

  global aviso
  if okko=='ok':
    aviso = PhotoImage(file='assets/ok5.png')
  else:
    aviso = PhotoImage(file='assets/ko5.png')
  
  aviso_frame = Frame(pop)
  aviso_frame.pack()

  aviso_pic = Label(aviso_frame, image=aviso, bd=0)
  aviso_pic.grid(row=0, column=0)
  
  if okko=='ok':
    pop.after(100, lambda: playsound('music/effect.mp3'))

  pop.after(5000, pop.destroy)


def start():
    fichaxe=0
    print(fichaxe)
    def save_att(student_id, name_student):
        nonlocal fichaxe
        nonlocal timeplay
        if fichaxe != 1:
          print(fichaxe)
          d = datetime.date.today()
          now = datetime.datetime.utcnow()
          ids = []
          currentDT = datetime.datetime.now()
          dateshow = currentDT.strftime("%H")
          minuteshow = currentDT.strftime("%M")
          intdate = int(dateshow)
          date = currentDT.strftime("%I:%M:%S")

          event = ['morning','evening']
          """datefile =(int(d.strftime("%d")) - 1)
          d_m_file_name = d.strftime(datefile+"_%B_" + event[0] + ".csv")
          d_e_file_name = d.strftime(datefile + "_%B_" + event[1] + ".csv")
          print("d_m_file_name  " + d_m_file_name)
          print("d_m_file_name  " + d_e_file_name)"""
          #os.remove(d_m_file_name)
          #os.remove(d_e_file_name)
          if intdate < 15:
              file_name = d.strftime("%d_%B_" + event[0] + ".csv")
          elif(intdate >=15):
              file_name = d.strftime("%d_%B_" + event[1] + ".csv")
          try:
              ##print(os.getcwd())
              with open(file_name, 'r+') as file_data:
                  file_data.seek(0)
                  for line in file_data:
                      id, name, state, dt = line.split(",")
                      ids.append(int(id))
                      sql = "INSERT INTO teachers (id,name,present,date,morning,evening) VALUES (%s, %s, %s, %s, %s, %s)"
                      if intdate < 15:
                        val = (str(student_id), name_student, "p", currentDT.strftime('%Y-%m-%d'), currentDT.strftime('%H:%M:%S'), "00:00:00")
                      else:
                        val = (str(student_id), name_student, "p", currentDT.strftime('%Y-%m-%d'), "00:00:00", currentDT.strftime('%H:%M:%S'))
                      mycourse.execute(sql, val)
                      mydb.commit()
                      file_data.write(str(student_id) + "," + name_student + ",p," + date + "\n")
                      file_data.seek(0)
                      print("marked", name_student, "present")
                      marked('ok')
                      timeplay=2
                      fichaxe=1
                      break

          except FileNotFoundError:
              with open(file_name, 'w') as file_data:
                  sql = "INSERT INTO teachers (id,name,present,date,morning,evening) VALUES (%s, %s, %s, %s, %s, %s)"
                  if intdate < 15:
                    val = (str(student_id), name_student, "p", currentDT.strftime('%Y-%m-%d'), currentDT.strftime('%H:%M:%S'), "00:00:00")
                  else:
                    val = (str(student_id), name_student, "p", currentDT.strftime('%Y-%m-%d'), "00:00:00", currentDT.strftime('%H:%M:%S'))
                  mycourse.execute(sql, val)
                  mydb.commit()
                  file_data.write(str(student_id) + "," + name_student + ",p," + date + "\n")
                  print("file created")
                  marked('ok')
                  timeplay=2
                  fichaxe=1

    if fichaxe!=1:    
      # setting font for puttext
      font = cv2.FONT_HERSHEY_SIMPLEX

      # loading data files and storing in lists
      with open("encodings.txt", 'rb') as file_data:
          known_face_encodings = pickle.load(file_data)

      with open("name.txt", 'rb') as file_data:
          known_names = pickle.load(file_data)
          print(known_names)

      with open("ids.txt", 'rb') as file_data:
          student_ids = pickle.load(file_data)
          print(student_ids)
          
      cam = cv2.VideoCapture(0)
      timeplay = 1
      capture_duration = 2
      while (timeplay < capture_duration):
          frame = cam.read()[1]

          # converting BGR frame to RGB frame
          rgb_frame = frame[:, :, ::-1]

          # gettting face locations
          face_locations = face_recognition.face_locations(rgb_frame)

          # getting face encodings
          current_face_encoding = face_recognition.face_encodings(rgb_frame, face_locations)

          for (top, right, bottom, left), face_encoding in zip(face_locations, current_face_encoding):
              # compariong face with known faces
              matches = face_recognition.compare_faces(known_face_encodings, face_encoding, tolerance=0.5)
              # print(matches)
              name = "unknown"

              if True in matches:
                  # getting index for matched face
                  match_index = matches.index(True)

                  # getting name of the person
                  name = known_names[match_index]
                  student_id_det = student_ids[match_index]
                  save_att(student_id_det, name)
              else:
                  continue

              cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 1)
              cv2.putText(frame, name, (left, top), font, 0.6, (0, 255, 0), 0)
          cv2.putText(frame, "q->Pechar", (0, 25), font, 0.6, (0, 0, 0), 0)
          winname='Live'
          cv2.namedWindow(winname)        # Create a named window
          cv2.moveWindow(winname, 450,200)  # Move it to (450,200)
          ##cv2.imshow("Live", frame)
          cv2.imshow(winname, frame)
          if cv2.waitKey(1) & 0xFF == ord('q'):
              break
      cam.release()
      cv2.destroyAllWindows()
      



window = Tk()

window.geometry("520x450")
window.configure(bg = "#FFFFFF")
window.title("IES ...")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 450,
    width = 520,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)

#Button1 -> Acerca de...
button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    cursor='tcross',
    ##command=lambda: print("button_1 clicked"),
    command=aboutof,
    relief="flat"
)
button_1.place(
    x=14.0,
    y=410.0,
    width=86.0,
    height=24.0
)

button_1.bind('<Enter>',  onEnterBt1)
button_1.bind('<Leave>',  onLeaveBt1)


#Button2 -> SaÃ­r
button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    cursor='tcross',
    ##command=lambda: print("button_2 clicked"),
    command=window.quit,
    relief="flat"
)
button_2.place(
    x=405.0,
    y=379.0,
    width=77.0,
    height=39.0
)

button_2.bind('<Enter>',  onEnterBt2)
button_2.bind('<Leave>',  onLeaveBt2)


#Button3 -> Verificar
button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    cursor='tcross',
    ##command=lambda: print("button_3 clicked"),
    command=start,
    relief="flat"
)
button_3.place(
    x=183.0,
    y=246.0,
    width=156.0,
    height=52.0
)

button_3.bind('<Enter>',  onEnterBt3)
button_3.bind('<Leave>',  onLeaveBt3)

#Button4 -> Engadir
button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    cursor='tcross',
    ##command=lambda: print("button_4 clicked"),
    command=Open_new,
    relief="flat"
)
button_4.place(
    x=192.0,
    y=180.0,
    width=136.0,
    height=52.0
)

button_4.bind('<Enter>',  onEnterBt4)
button_4.bind('<Leave>',  onLeaveBt4)

canvas.create_rectangle(
    0.0,
    10.0,
    12.0,
    437.0,
    fill="#1F1D90",
    outline="")

canvas.create_rectangle(
    0.0,
    437.0,
    520.0,
    450.0,
    fill="#1F1D90",
    outline="")

canvas.create_rectangle(
    508.0,
    10.0,
    520.0,
    437.0,
    fill="#1F1D90",
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    520.0,
    13.0,
    fill="#1F1D90",
    outline="")

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    260.0,
    107.0,
    image=image_image_1
)

canvas.create_rectangle(
    296.0,
    14.0,
    507.0,
    33.0,
    fill="#000000",
    outline="")

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    118.0,
    26.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    260.0,
    394.0,
    image=image_image_3
)

# Styling the label widget so that clock
# will look more attractive
lbl = Label(window, font=('time', 8, 'bold'), bg='#ffffff')
lbl.place(x=330.0, y=15.4)
time()


window.resizable(False, False)
window.mainloop()
